//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Withdrawal.java
//  @ Date : 7/18/2014
//  @ Author : 
//
//
package AtmGeneratedCode;

public class Withdrawal extends Transaction
{
    private int amount;
    private Keypad keypad;
    private CashDispenser cashDispenser;

    public Withdrawal(int accountNumber, Screen screen,
            BankDatabase bankDatabase, Keypad keypad,
            CashDispenser cashDispenser)
    {
        super(accountNumber, screen, bankDatabase);
        this.keypad = keypad;
        this.cashDispenser = cashDispenser;
    }

    @Override
    public void execute()
    {
        // Cash was not dispensed yet
        boolean cashDispensed = false; 
        double availableBalance;
        
        BankDatabase bankDatabase = getBankDatabase();
        Screen screen = getScreen();
        
        // Loop until cash is dispensed or the user cancels
        do
        {
            // Obtain a chosen withdrawal amount from user
            amount = displayMenuOfAmounts();
            
            // Check whether user chose a withdrawal amount or canceled
            if (amount != WithdrawalAmountOption.EXIT.getAmount())
            {
                // Get available balance of account involved
                availableBalance = bankDatabase.getAvailableBalance(getAccountNumber());
                
                // Check whether the user has enough money in the account
                if (amount <= availableBalance)
                {
                    // Check whether cash dispenser has enough or not
                    if (cashDispenser.isSufficientCashAvailable(amount))
                    {
                        // Update the account involved to reflect the withdrawal
                        bankDatabase.debit(getAccountNumber(), amount);
                        
                        cashDispenser.dispenseCash(amount);
                        cashDispensed = true;
                        
                        screen.displayMessageLine("\nYour cash has been dispensed. Please take your cash now.");
                    }
                    else 
                    {
                        screen.displayMessageLine("\nInsufficient cash available in the ATM." +
                        		" \n\nPlease choose a smaller amount.");
                    }
                }
            }
            else
            {
                screen.displayMessageLine("\nInsufficient funds in your account. " +
                		"\n\nPlease choose a smaller amount.");
            }

        }
        while (!cashDispensed);
    }

    /**
     * Display a menu of withdrawal amounts and the option to cancel; return
     * 
     * @return the chosen amount or 0 if the user chooses to cancel
     */
    private int displayMenuOfAmounts()
    {
        int userChoice = 0;
        Screen screen = getScreen();
        
        // Loop while no valid choice has been made
        while (userChoice == 0)
        {
            screen.displayMessageLine("\nWithdrawal Menu: ");
            for (WithdrawalAmountOption wao : WithdrawalAmountOption.values())
            {
                if (WithdrawalAmountOption.EXIT != wao)
                {
                    screen.displayMessageLine(wao.getChoice() + " - " + wao.getAmount());
                }
            }
            screen.displayMessage("\nChoosen a withdrawal amount: ");
            
            int input = keypad.getInput();
            
            // Determine how to proceed based on the input value
            try 
            {
                WithdrawalAmountOption option = WithdrawalAmountOption.convert(input);  
                userChoice = option.getAmount();
            }
            catch (IllegalArgumentException e)
            {
                screen.displayMessageLine("\nInvalid selection. Try again.");
            }
        }
        return userChoice;
    }
}
