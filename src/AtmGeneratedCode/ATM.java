//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : ATM.java
//  @ Date : 7/18/2014
//  @ Author : 
//
//
package AtmGeneratedCode;

public class ATM
{
    private boolean userAuthenticated = false;
    private int currentAccountNumber;
    private Screen screen;
    private Keypad keypad;
    private DepositSlot depositSlot;
    private CashDispenser cashDispenser;
    private BankDatabase bankDatabase;

    public ATM()
    {
        screen = new Screen();
        keypad = new Keypad();
        depositSlot = new DepositSlot();
        cashDispenser = new CashDispenser();
        bankDatabase = new BankDatabase();
    }

    public void run()
    {
        // Welcome and authenticate user; perform transaction
        while (true)
        {
            // Loop while user is not yet authenticated
            while (!userAuthenticated)
            {
                screen.displayMessageLine("\nWelcome");
                authenticateUser();
            }

            // User is now authenticated
            performTransaction();

            // Reset before next ATM session
            userAuthenticated = false;
            currentAccountNumber = 0;

            screen.displayMessageLine("\nThank you! Goodbye!");
        }
    }

    /*
     * Attempts to authenticate user against database
     */
    private void authenticateUser()
    {
        screen.displayMessage("\nPlease enter your account number: ");
        int accountNumber = keypad.getInput();
        screen.displayMessage("\nEnter yor PIN: ");
        int pin = keypad.getInput();

        userAuthenticated = bankDatabase.authenticateUser(accountNumber, pin);

        if (userAuthenticated)
        {
            currentAccountNumber = accountNumber;
        }
        else
        {
            screen.displayMessageLine("\nInvalid account number or PIN. Please try again.");
        }
    }

    /*
     * Display menu and perform transaction
     */
    private void performTransaction()
    {
        // User has not choose to exit
        boolean userExited = false;
        Transaction currentTransaction = null;

        // Loop while user has not chosen option to exit system
        while (!userExited)
        {
            // Show menu and get user selection
            MainMenuOption mainMenuSelection = displayMainMenu();
            if (mainMenuSelection == null)
            {
                screen.displayMessageLine("\nF@$%^ you! You didn't enter a valid selection. Try again, you're madafaka!");
            }
            else
            {
                switch (mainMenuSelection)
                {
                    case BALANCE_INQUIRY:
                    case WITHDRAWAL:
                    case DEPOSIT:
                        currentTransaction = createTransaction(mainMenuSelection);
                        currentTransaction.execute();
                        break;

                    case EXIT:
                        screen.displayMessageLine("\nExiting system...");
                        userExited = true;
                        break;
                }
            }
        }
    }

    private MainMenuOption displayMainMenu()
    {
        screen.displayMessageLine("\nMain menu: ");
        for (MainMenuOption option: MainMenuOption.values())
        {
            screen.displayMessageLine(option.getValue() + " - " + option.getName());
        }
        screen.displayMessage("Enter a choice: ");
        
        return MainMenuOption.convert(keypad.getInput());
    }
    
    private Transaction createTransaction(MainMenuOption mainMenuSelection)
    {
        Transaction result = null;
        switch (mainMenuSelection)
        {
            case BALANCE_INQUIRY:
                result = new BalanceInquiry(currentAccountNumber, screen,
                        bankDatabase);
                break;

            case WITHDRAWAL:
                result = new Withdrawal(currentAccountNumber, screen,
                        bankDatabase, keypad, cashDispenser);
                break;

            case DEPOSIT:
                result = new Deposit(currentAccountNumber, screen,
                        bankDatabase, keypad, depositSlot);
                break;
        }
        return result;
    }
}
